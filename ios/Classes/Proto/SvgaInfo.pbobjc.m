// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svga_info.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "SvgaInfo.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SvgaInfoRoot

@implementation SvgaInfoRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SvgaInfoRoot_FileDescriptor

static GPBFileDescriptor *SvgaInfoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SVGALoadInfo

@implementation SVGALoadInfo

@dynamic assetURL;
@dynamic remoteURL;
@dynamic width;
@dynamic height;
@dynamic widgetId;
@dynamic scaleType;
@dynamic mute;
@dynamic loopCount;

typedef struct SVGALoadInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t scaleType;
  int32_t loopCount;
  NSString *assetURL;
  NSString *remoteURL;
  double width;
  double height;
  int64_t widgetId;
} SVGALoadInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assetURL",
        .dataTypeSpecific.clazz = Nil,
        .number = SVGALoadInfo_FieldNumber_AssetURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SVGALoadInfo__storage_, assetURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remoteURL",
        .dataTypeSpecific.clazz = Nil,
        .number = SVGALoadInfo_FieldNumber_RemoteURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SVGALoadInfo__storage_, remoteURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = SVGALoadInfo_FieldNumber_Width,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SVGALoadInfo__storage_, width),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = SVGALoadInfo_FieldNumber_Height,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SVGALoadInfo__storage_, height),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "widgetId",
        .dataTypeSpecific.clazz = Nil,
        .number = SVGALoadInfo_FieldNumber_WidgetId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SVGALoadInfo__storage_, widgetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "scaleType",
        .dataTypeSpecific.clazz = Nil,
        .number = SVGALoadInfo_FieldNumber_ScaleType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SVGALoadInfo__storage_, scaleType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mute",
        .dataTypeSpecific.clazz = Nil,
        .number = SVGALoadInfo_FieldNumber_Mute,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "loopCount",
        .dataTypeSpecific.clazz = Nil,
        .number = SVGALoadInfo_FieldNumber_LoopCount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SVGALoadInfo__storage_, loopCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SVGALoadInfo class]
                                     rootClass:[SvgaInfoRoot class]
                                          file:SvgaInfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SVGALoadInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\006!!\000\002\007!!\000\005\010\000\006\t\000\010\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ResultInfo

@implementation ResultInfo

@dynamic code;
@dynamic message;
@dynamic textureId;

typedef struct ResultInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *message;
  int64_t textureId;
} ResultInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = ResultInfo_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ResultInfo__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = ResultInfo_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ResultInfo__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textureId",
        .dataTypeSpecific.clazz = Nil,
        .number = ResultInfo_FieldNumber_TextureId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ResultInfo__storage_, textureId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ResultInfo class]
                                     rootClass:[SvgaInfoRoot class]
                                          file:SvgaInfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ResultInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
